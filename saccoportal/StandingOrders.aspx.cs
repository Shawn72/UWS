using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Providers.Entities;
using System.Web.UI;
using System.Web.UI.WebControls;
using SACCOPortal.NavOData;
using System.Drawing;

namespace SACCOPortal
{
    public partial class StandingOrders : System.Web.UI.Page
    {
        public NAV nav = new NAV(new Uri(ConfigurationManager.AppSettings["ODATA_URI"]))
        {
            Credentials =
            new NetworkCredential(ConfigurationManager.AppSettings["W_USER"], ConfigurationManager.AppSettings["W_PWD"],
                ConfigurationManager.AppSettings["DOMAIN"])
        };
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["username"] == null)
            {
                Response.Redirect("Default.aspx");
            }
            if (!IsPostBack)
            {
                LoadStandingOrders(nav);
                loadAccounts(nav, drplstSrcAccNo);
                
            }
         
        }
        protected void LoadStandingOrders(NAV navData)
        {
            var navObj = navData.StandingOrders.Where(r => r.BOSA_Account_No == Session["username"].ToString()).ToList();
            
            grdViewStandingOrders.DataSource = navObj;
            grdViewStandingOrders.AutoGenerateColumns = false;
            grdViewStandingOrders.AutoGenerateDeleteButton = false;
            grdViewStandingOrders.AutoGenerateEditButton = false;
            grdViewStandingOrders.DataBind();

            
        }
        protected void loadAccounts(NAV navData, DropDownList ddlSrcAcc)
        {
            var navAccDetail = navData.FosaAccounts.Where(r => r.BOSA_Account_No == Session["username"].ToString()).ToList();
            
            ddlSrcAcc.DataSource = navAccDetail;
            ddlSrcAcc.DataTextField = "Name";
            ddlSrcAcc.DataValueField = "No";
            ddlSrcAcc.DataBind();

        }
       
        protected void SaveStandingOrders(){
            //try{

            
            string bsaNo = Session["username"].ToString();
            string accNo = drplstSrcAccNo.SelectedValue;
            string freq = ddlFrequency.SelectedValue;
            string duration = ddlDuration.SelectedValue;
            int acTp = 0;
            string actype = ddlDestAccType.SelectedItem.Text;
            string destacNo = "";
            if(actype=="Internal"){
                acTp=0;
                destacNo = ddlDestAccName.SelectedValue;
            }
            else if(actype=="External"){
                acTp=1;
                destacNo = txtBxDestAcc.Text;
            }
            else if(actype=="BOSA"){
                acTp=2;
                destacNo = ddlDestAccName.SelectedValue;
            }

            string amount = txtAmount.Text;
            decimal amt = Convert.ToDecimal(amount);
            DateTime startDate = Convert.ToDateTime(txtSotStartDate.Text);
            DateTime NowTime = DateTime.Now;
            int startDateError = DateTime.Compare(startDate, NowTime);
            if (startDateError < 0)
            {
                SACCOFactory.ShowAlert("Adjust Start Date be today or later");
            }
            WSConfig.ObjNav.FnStandingOrders(bsaNo, accNo, freq, duration, destacNo, startDate, amt,acTp);
            SACCOFactory.ShowAlert("Standing Order Created successfully!");
          //}
          //  catch(Exception ex){
          //   //   SACCOFactory.ShowAlert("There was an error in creating this standing order");
          //      }
        }

        protected void btnCalendar_Click(object sender, EventArgs e)
        {
            cal1.Visible = true;
        }

        protected void cal1_SelectionChanged(object sender, EventArgs e)
        {
            txtSotStartDate.Text = cal1.SelectedDate.ToString("MM/dd/yyyy");            
            cal1.Visible=false;
        }

        protected void stadingOrderbtn_Click(object sender, EventArgs e)
        {
            SaveStandingOrders();
        }

        protected void ddlDuration_SelectedIndexChanged(object sender, EventArgs e)
        {
                      
            if(ddlDuration.SelectedIndex==0){
                SACCOFactory.ShowAlert("Please select a valid duration");

                //DateTime dtTime = DateTime.Now;
                //DateTime Onew = dtTime.AddMonths(1);
                //var monthOne = (Onew - dtTime).TotalDays;
                //var totalMonths = Math.Truncate((monthOne % 365) / 30);
                //SACCOFactory.ShowAlert(totalMonths + " month");

            //}
            //else if (ddlDuration.SelectedIndex == 2) {
            //    //DateTime Thrmon = dtTime.AddMonths(3);
            //    //var monthTw = (Thrmon - dtTime).TotalDays;
            //    //var totalThrMonths = Math.Truncate((monthTw % 365) / 30);
            //    //SACCOFactory.ShowAlert(totalThrMonths + " Months");
            //}
            //else if (ddlDuration.SelectedIndex == 3)
            //{
            //    //var Sixmo = dtTime.AddMonths(6);
            //    //var monthSix = (Sixmo - dtTime).TotalDays;
            //    //var totalThrMonths = Math.Truncate((monthSix % 365) / 30);
            //    //SACCOFactory.ShowAlert(totalThrMonths + " Months");

            //}
            //else if (ddlDuration.SelectedIndex == 4)
            //{
            
            //}
            //else {
            //    SACCOFactory.ShowAlert("Please select a valid date");
            }
        }

        protected void cal1_DayRender(object sender, DayRenderEventArgs e)
        {
            if (e.Day.IsToday)
            {
                e.Cell.BackColor = Color.Green;
                e.Cell.BorderStyle = BorderStyle.Groove;
            }
            else if (e.Day.IsWeekend)
            {
                e.Cell.BackColor = Color.LightBlue;
            }
            else if (e.Day.IsSelected)
            {
                e.Cell.BackColor = Color.Blue;
            }
        }

        protected void drplstSrcAccNo_SelectedIndexChanged(object sender, EventArgs e)
        {
            string slctedAcc = drplstSrcAccNo.SelectedValue;
            ddlDestAccName.SelectedIndex = 0;
            ddlDestAccName.Items.Clear();
            filldestAccs(nav, slctedAcc, ddlDestAccName);
                        
        }
        protected void filldestAccs(NAV navData, string srcAccN, DropDownList ddlDestAccName)
        {
            var objNav = navData.FosaAccounts.Where(r => r.BOSA_Account_No == Session["username"].ToString() && r.No != srcAccN).ToList();

            ddlDestAccName.DataSource = objNav;
            ddlDestAccName.DataTextField = "Name";
            ddlDestAccName.DataValueField = "No";
            ddlDestAccName.DataBind();
           

        }

        protected void ddlDestAccType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddlDestAccType.SelectedValue == "External")
            {
                txtBxDestAcc.Visible = true;
                ddlDestAccName.Visible = false;
            }
            else
            {
                txtBxDestAcc.Visible = false;
                ddlDestAccName.Visible = true;
            }
        }

        protected void grdViewStandingOrders_RowEditing(object sender, GridViewEditEventArgs e)
        {
            editStandingorders();
        }
        protected void editStandingorders()
        {
            SACCOFactory.ShowAlert("Its clear you are mad now");
        }

        protected void STOChange_Click(object sender, EventArgs e)
        {

        }

        protected void grdViewStandingOrders_SelectedIndexChanged(object sender, EventArgs e)
        {
            SelctdSTODetails();
        }
        protected void SelctdSTODetails()
        {
             
        }
    }
}